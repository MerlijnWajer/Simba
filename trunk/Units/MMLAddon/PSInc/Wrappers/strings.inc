function psFormat(const fmt : string;const args : array of const) : string; ps_decl; ps_decl;begin;  Result := Format(fmt,Args);end;function Capitalize(str : string) : string; ps_decl;var  i , l : integer;  cap : boolean;begin;  result := str;  l := length(str);  cap := true;  for i := 1 to l do    if cap and (str[i] in ['a'..'z'] + ['A'..'Z']) then    begin;      result[i] := UpperCase(str[i])[1];      cap := false;    end else if not (str[i] in ['a'..'z'] + ['A'..'Z']) then      cap := true;end;function ps_BoolToStr(bool : boolean) : string; ps_decl;begin;  result := BoolToStr(bool,true);end;function ps_IntToStr(int : integer) : string; ps_decl;begin  result := inttostr(int);end;function ps_FloatToStr(flt : extended) : string; ps_decl;begin  result := floattostr(flt);end;function ps_StrToInt(value: String): Integer; ps_decl;begin  result := StrToInt(value);end;function ps_StrToIntDef(value: String; default: Integer): Integer; ps_decl;begin  result := StrToIntDef(value,default);end;function ps_StrToFloat(value: String): Extended; ps_decl;begin  result := StrToFloat(value);end;function ps_StrToFloatDef(value: String; default: Extended): Extended; ps_decl;begin  result := StrToFloatDef(value,default);end;function ps_StrToBool(value: String): Boolean;ps_decl;begin  result := StrToBool(value);end;function ps_StrToBoolDef(value: String; default: Boolean): Boolean; ps_decl;begin  result := StrToBoolDef(value,default);end;function ps_Between(s1, s2, str: string): string; ps_decl;var  I,J : integer;begin;  Result := '';  I := pos(s1,str);  if I > 0 then  begin;    i := i + length(s1);    j := posex(s2,str,i);    if j > 0 then      Result := copy(str,i,j-i);  end;end;