function psFormat(const fmt : string;const args : array of const) : string; extdecl; extdecl;begin;  Result := Format(fmt,Args);end;function Capitalize(str : string) : string; extdecl;var  i , l : integer;  cap : boolean;  Range : set of char;begin;  result := str;  l := length(str);  cap := true;  Range :=  ['a'..'z'] + ['A'..'Z'];  for i := 1 to l do    if cap and (str[i] in Range) then    begin;      result[i] := UpperCase(str[i])[1];      cap := false;    end else if not (str[i] in Range) then      cap := true;end;type  StrExtr =(Numbers, Letters, Others);function ExtractFromStr( Str : string; Extract : StrExtr) : string; extdecl;var  Range : set of char;  i : integer;begin;  case Extract of    Numbers : Range := ['0'..'9'];    Letters : Range := ['A'..'Z'] + ['a'..'z'];    Others  : Range := [#0..#255] - ['0'..'9'] - ['A'..'Z'] - ['a'..'z'];  end;  for i := length(str) downto 1 do    if str[i] in Range then      result := str[i] + result;end;function ps_BoolToStr(bool : boolean) : string; extdecl;begin;  result := BoolToStr(bool,true);end;function ps_Replace(Text, FindStr, ReplaceStr: string; Flags: TReplaceFlags): string; extdecl;begin;  result := StringReplace(Text,FindStr,ReplaceStr,Flags);end;function ps_IntToStr(int : integer) : string; extdecl;begin  result := inttostr(int);end;function ps_FloatToStr(flt : extended) : string; extdecl;begin  result := floattostr(flt);end;function ps_StrToInt(value: String): Integer; extdecl;begin  result := StrToInt(value);end;function ps_StrToIntDef(value: String; default: Integer): Integer; extdecl;begin  result := StrToIntDef(value,default);end;function ps_StrToFloat(value: String): Extended; extdecl;begin  result := StrToFloat(value);end;function ps_StrToFloatDef(value: String; default: Extended): Extended; extdecl;begin  result := StrToFloatDef(value,default);end;function ps_StrToBool(value: String): Boolean;extdecl;begin  result := StrToBool(value);end;function ps_StrToBoolDef(value: String; default: Boolean): Boolean; extdecl;begin  result := StrToBoolDef(value,default);end;function ps_Between(s1, s2, str: string): string; extdecl;var  I,J : integer;begin;  Result := '';  I := pos(s1,str);  if I > 0 then  begin;    i := i + length(s1);    j := posex(s2,str,i);    if j > 0 then      Result := copy(str,i,j-i);  end;end;