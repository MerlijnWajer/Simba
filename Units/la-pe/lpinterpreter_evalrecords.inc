{
	Author: Niels A.D
	Project: Lape (http://code.google.com/p/la-pe/)
	License: GNU Lesser GPL (http://www.gnu.org/licenses/lgpl.html)

	These are the evaluation related records for the bytecode.
}
{%MainUnit lpinterpreter.pas}

POC_Eval__PtrD_PtrL_PtrR = ^TOC_Eval__PtrD_PtrL_PtrR;
TOC_Eval__PtrD_PtrL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD, PtrL, PtrR: Pointer; end;
POC_Eval__PtrD_PtrL_VarR = ^TOC_Eval__PtrD_PtrL_VarR;
TOC_Eval__PtrD_PtrL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD, PtrL: Pointer; VOffsetR: Word; end;
POC_Eval__PtrD_PtrL_StkR = ^TOC_Eval__PtrD_PtrL_StkR;
TOC_Eval__PtrD_PtrL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD, PtrL: Pointer; SOffsetR: Byte; StackInc: ShortInt; end;
POC_Eval__PtrD_PtrL_PVarR = ^TOC_Eval__PtrD_PtrL_PVarR;
TOC_Eval__PtrD_PtrL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD, PtrL: Pointer; VOffsetR, PRightOffset: Word; end;
POC_Eval__PtrD_PtrL_PStkR = ^TOC_Eval__PtrD_PtrL_PStkR;
TOC_Eval__PtrD_PtrL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD, PtrL: Pointer; end;
POC_Eval__PtrD_VarL_PtrR = ^TOC_Eval__PtrD_VarL_PtrR;
TOC_Eval__PtrD_VarL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; VOffsetL: Word; PtrR: Pointer; end;
POC_Eval__PtrD_VarL_VarR = ^TOC_Eval__PtrD_VarL_VarR;
TOC_Eval__PtrD_VarL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; VOffsetL, VOffsetR: Word; end;
POC_Eval__PtrD_VarL_StkR = ^TOC_Eval__PtrD_VarL_StkR;
TOC_Eval__PtrD_VarL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; VOffsetL: Word; SOffsetR: Byte; StackInc: ShortInt; end;
POC_Eval__PtrD_VarL_PVarR = ^TOC_Eval__PtrD_VarL_PVarR;
TOC_Eval__PtrD_VarL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; VOffsetL, VOffsetR, PRightOffset: Word; end;
POC_Eval__PtrD_VarL_PStkR = ^TOC_Eval__PtrD_VarL_PStkR;
TOC_Eval__PtrD_VarL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; VOffsetL: Word; end;
POC_Eval__PtrD_StkL_PtrR = ^TOC_Eval__PtrD_StkL_PtrR;
TOC_Eval__PtrD_StkL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; SOffsetL: Byte; PtrR: Pointer; StackInc: ShortInt; end;
POC_Eval__PtrD_StkL_VarR = ^TOC_Eval__PtrD_StkL_VarR;
TOC_Eval__PtrD_StkL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; SOffsetL: Byte; VOffsetR: Word; StackInc: ShortInt; end;
POC_Eval__PtrD_StkL_StkR = ^TOC_Eval__PtrD_StkL_StkR;
TOC_Eval__PtrD_StkL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; SOffsetL, SOffsetR: Byte; StackInc: ShortInt; end;
POC_Eval__PtrD_StkL_PVarR = ^TOC_Eval__PtrD_StkL_PVarR;
TOC_Eval__PtrD_StkL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; SOffsetL: Byte; VOffsetR, PRightOffset: Word; StackInc: ShortInt; end;
POC_Eval__PtrD_StkL_PStkR = ^TOC_Eval__PtrD_StkL_PStkR;
TOC_Eval__PtrD_StkL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; SOffsetL: Byte; StackInc: ShortInt; end;
POC_Eval__PtrD_PVarL_PtrR = ^TOC_Eval__PtrD_PVarL_PtrR;
TOC_Eval__PtrD_PVarL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; VOffsetL: Word; PtrR: Pointer; PLeftOffset: Word; end;
POC_Eval__PtrD_PVarL_VarR = ^TOC_Eval__PtrD_PVarL_VarR;
TOC_Eval__PtrD_PVarL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; VOffsetL, VOffsetR, PLeftOffset: Word; end;
POC_Eval__PtrD_PVarL_StkR = ^TOC_Eval__PtrD_PVarL_StkR;
TOC_Eval__PtrD_PVarL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; VOffsetL: Word; SOffsetR: Byte; PLeftOffset: Word; StackInc: ShortInt; end;
POC_Eval__PtrD_PVarL_PVarR = ^TOC_Eval__PtrD_PVarL_PVarR;
TOC_Eval__PtrD_PVarL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; VOffsetL, VOffsetR, PRightOffset, PLeftOffset: Word; end;
POC_Eval__PtrD_PVarL_PStkR = ^TOC_Eval__PtrD_PVarL_PStkR;
TOC_Eval__PtrD_PVarL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; VOffsetL, PLeftOffset: Word; end;
POC_Eval__PtrD_PStkL_PtrR = ^TOC_Eval__PtrD_PStkL_PtrR;
TOC_Eval__PtrD_PStkL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD, PtrR: Pointer; end;
POC_Eval__PtrD_PStkL_VarR = ^TOC_Eval__PtrD_PStkL_VarR;
TOC_Eval__PtrD_PStkL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; VOffsetR: Word; end;
POC_Eval__PtrD_PStkL_StkR = ^TOC_Eval__PtrD_PStkL_StkR;
TOC_Eval__PtrD_PStkL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; SOffsetL, SOffsetR: Byte; StackInc: ShortInt; end;
POC_Eval__PtrD_PStkL_PVarR = ^TOC_Eval__PtrD_PStkL_PVarR;
TOC_Eval__PtrD_PStkL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; VOffsetR, PRightOffset: Word; end;
POC_Eval__PtrD_PStkL_PStkR = ^TOC_Eval__PtrD_PStkL_PStkR;
TOC_Eval__PtrD_PStkL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrD: Pointer; end;
POC_Eval__VarD_PtrL_PtrR = ^TOC_Eval__VarD_PtrL_PtrR;
TOC_Eval__VarD_PtrL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; PtrL, PtrR: Pointer; end;
POC_Eval__VarD_PtrL_VarR = ^TOC_Eval__VarD_PtrL_VarR;
TOC_Eval__VarD_PtrL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; PtrL: Pointer; VOffsetR: Word; end;
POC_Eval__VarD_PtrL_StkR = ^TOC_Eval__VarD_PtrL_StkR;
TOC_Eval__VarD_PtrL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; PtrL: Pointer; SOffsetR: Byte; StackInc: ShortInt; end;
POC_Eval__VarD_PtrL_PVarR = ^TOC_Eval__VarD_PtrL_PVarR;
TOC_Eval__VarD_PtrL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; PtrL: Pointer; VOffsetR, PRightOffset: Word; end;
POC_Eval__VarD_PtrL_PStkR = ^TOC_Eval__VarD_PtrL_PStkR;
TOC_Eval__VarD_PtrL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; PtrL: Pointer; end;
POC_Eval__VarD_VarL_PtrR = ^TOC_Eval__VarD_VarL_PtrR;
TOC_Eval__VarD_VarL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL: Word; PtrR: Pointer; end;
POC_Eval__VarD_VarL_VarR = ^TOC_Eval__VarD_VarL_VarR;
TOC_Eval__VarD_VarL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL, VOffsetR: Word; end;
POC_Eval__VarD_VarL_StkR = ^TOC_Eval__VarD_VarL_StkR;
TOC_Eval__VarD_VarL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL: Word; SOffsetR: Byte; StackInc: ShortInt; end;
POC_Eval__VarD_VarL_PVarR = ^TOC_Eval__VarD_VarL_PVarR;
TOC_Eval__VarD_VarL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL, VOffsetR, PRightOffset: Word; end;
POC_Eval__VarD_VarL_PStkR = ^TOC_Eval__VarD_VarL_PStkR;
TOC_Eval__VarD_VarL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL: Word; end;
POC_Eval__VarD_StkL_PtrR = ^TOC_Eval__VarD_StkL_PtrR;
TOC_Eval__VarD_StkL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; SOffsetL: Byte; PtrR: Pointer; StackInc: ShortInt; end;
POC_Eval__VarD_StkL_VarR = ^TOC_Eval__VarD_StkL_VarR;
TOC_Eval__VarD_StkL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; SOffsetL: Byte; VOffsetR: Word; StackInc: ShortInt; end;
POC_Eval__VarD_StkL_StkR = ^TOC_Eval__VarD_StkL_StkR;
TOC_Eval__VarD_StkL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; SOffsetL, SOffsetR: Byte; StackInc: ShortInt; end;
POC_Eval__VarD_StkL_PVarR = ^TOC_Eval__VarD_StkL_PVarR;
TOC_Eval__VarD_StkL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; SOffsetL: Byte; VOffsetR, PRightOffset: Word; StackInc: ShortInt; end;
POC_Eval__VarD_StkL_PStkR = ^TOC_Eval__VarD_StkL_PStkR;
TOC_Eval__VarD_StkL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; SOffsetL: Byte; StackInc: ShortInt; end;
POC_Eval__VarD_PVarL_PtrR = ^TOC_Eval__VarD_PVarL_PtrR;
TOC_Eval__VarD_PVarL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL: Word; PtrR: Pointer; PLeftOffset: Word; end;
POC_Eval__VarD_PVarL_VarR = ^TOC_Eval__VarD_PVarL_VarR;
TOC_Eval__VarD_PVarL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL, VOffsetR, PLeftOffset: Word; end;
POC_Eval__VarD_PVarL_StkR = ^TOC_Eval__VarD_PVarL_StkR;
TOC_Eval__VarD_PVarL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL: Word; SOffsetR: Byte; PLeftOffset: Word; StackInc: ShortInt; end;
POC_Eval__VarD_PVarL_PVarR = ^TOC_Eval__VarD_PVarL_PVarR;
TOC_Eval__VarD_PVarL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL, VOffsetR, PRightOffset, PLeftOffset: Word; end;
POC_Eval__VarD_PVarL_PStkR = ^TOC_Eval__VarD_PVarL_PStkR;
TOC_Eval__VarD_PVarL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL, PLeftOffset: Word; end;
POC_Eval__VarD_PStkL_PtrR = ^TOC_Eval__VarD_PStkL_PtrR;
TOC_Eval__VarD_PStkL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; PtrR: Pointer; end;
POC_Eval__VarD_PStkL_VarR = ^TOC_Eval__VarD_PStkL_VarR;
TOC_Eval__VarD_PStkL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetR: Word; end;
POC_Eval__VarD_PStkL_StkR = ^TOC_Eval__VarD_PStkL_StkR;
TOC_Eval__VarD_PStkL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; SOffsetL, SOffsetR: Byte; StackInc: ShortInt; end;
POC_Eval__VarD_PStkL_PVarR = ^TOC_Eval__VarD_PStkL_PVarR;
TOC_Eval__VarD_PStkL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetR, PRightOffset: Word; end;
POC_Eval__VarD_PStkL_PStkR = ^TOC_Eval__VarD_PStkL_PStkR;
TOC_Eval__VarD_PStkL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; end;
POC_Eval__StkD_PtrL_PtrR = ^TOC_Eval__StkD_PtrL_PtrR;
TOC_Eval__StkD_PtrL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrL, PtrR: Pointer; StackInc: ShortInt; end;
POC_Eval__StkD_PtrL_VarR = ^TOC_Eval__StkD_PtrL_VarR;
TOC_Eval__StkD_PtrL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrL: Pointer; VOffsetR: Word; StackInc: ShortInt; end;
POC_Eval__StkD_PtrL_StkR = ^TOC_Eval__StkD_PtrL_StkR;
TOC_Eval__StkD_PtrL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrL: Pointer; SOffsetR: Byte; StackInc: ShortInt; end;
POC_Eval__StkD_PtrL_PVarR = ^TOC_Eval__StkD_PtrL_PVarR;
TOC_Eval__StkD_PtrL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrL: Pointer; VOffsetR, PRightOffset: Word; StackInc: ShortInt; end;
POC_Eval__StkD_PtrL_PStkR = ^TOC_Eval__StkD_PtrL_PStkR;
TOC_Eval__StkD_PtrL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrL: Pointer; StackInc: ShortInt; end;
POC_Eval__StkD_VarL_PtrR = ^TOC_Eval__StkD_VarL_PtrR;
TOC_Eval__StkD_VarL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL: Word; PtrR: Pointer; StackInc: ShortInt; end;
POC_Eval__StkD_VarL_VarR = ^TOC_Eval__StkD_VarL_VarR;
TOC_Eval__StkD_VarL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL, VOffsetR: Word; StackInc: ShortInt; end;
POC_Eval__StkD_VarL_StkR = ^TOC_Eval__StkD_VarL_StkR;
TOC_Eval__StkD_VarL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL: Word; SOffsetR: Byte; StackInc: ShortInt; end;
POC_Eval__StkD_VarL_PVarR = ^TOC_Eval__StkD_VarL_PVarR;
TOC_Eval__StkD_VarL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL, VOffsetR, PRightOffset: Word; StackInc: ShortInt; end;
POC_Eval__StkD_VarL_PStkR = ^TOC_Eval__StkD_VarL_PStkR;
TOC_Eval__StkD_VarL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL: Word; StackInc: ShortInt; end;
POC_Eval__StkD_StkL_PtrR = ^TOC_Eval__StkD_StkL_PtrR;
TOC_Eval__StkD_StkL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; SOffsetL: Byte; PtrR: Pointer; StackInc: ShortInt; end;
POC_Eval__StkD_StkL_VarR = ^TOC_Eval__StkD_StkL_VarR;
TOC_Eval__StkD_StkL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; SOffsetL: Byte; VOffsetR: Word; StackInc: ShortInt; end;
POC_Eval__StkD_StkL_StkR = ^TOC_Eval__StkD_StkL_StkR;
TOC_Eval__StkD_StkL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; SOffsetL, SOffsetR: Byte; StackInc: ShortInt; end;
POC_Eval__StkD_StkL_PVarR = ^TOC_Eval__StkD_StkL_PVarR;
TOC_Eval__StkD_StkL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; SOffsetL: Byte; VOffsetR, PRightOffset: Word; StackInc: ShortInt; end;
POC_Eval__StkD_StkL_PStkR = ^TOC_Eval__StkD_StkL_PStkR;
TOC_Eval__StkD_StkL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; SOffsetL: Byte; StackInc: ShortInt; end;
POC_Eval__StkD_PVarL_PtrR = ^TOC_Eval__StkD_PVarL_PtrR;
TOC_Eval__StkD_PVarL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL: Word; PtrR: Pointer; PLeftOffset: Word; StackInc: ShortInt; end;
POC_Eval__StkD_PVarL_VarR = ^TOC_Eval__StkD_PVarL_VarR;
TOC_Eval__StkD_PVarL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL, VOffsetR, PLeftOffset: Word; StackInc: ShortInt; end;
POC_Eval__StkD_PVarL_StkR = ^TOC_Eval__StkD_PVarL_StkR;
TOC_Eval__StkD_PVarL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL: Word; SOffsetR: Byte; PLeftOffset: Word; StackInc: ShortInt; end;
POC_Eval__StkD_PVarL_PVarR = ^TOC_Eval__StkD_PVarL_PVarR;
TOC_Eval__StkD_PVarL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL, VOffsetR, PRightOffset, PLeftOffset: Word; StackInc: ShortInt; end;
POC_Eval__StkD_PVarL_PStkR = ^TOC_Eval__StkD_PVarL_PStkR;
TOC_Eval__StkD_PVarL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL, PLeftOffset: Word; StackInc: ShortInt; end;
POC_Eval__StkD_PStkL_PtrR = ^TOC_Eval__StkD_PStkL_PtrR;
TOC_Eval__StkD_PStkL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrR: Pointer; StackInc: ShortInt; end;
POC_Eval__StkD_PStkL_VarR = ^TOC_Eval__StkD_PStkL_VarR;
TOC_Eval__StkD_PStkL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetR: Word; StackInc: ShortInt; end;
POC_Eval__StkD_PStkL_StkR = ^TOC_Eval__StkD_PStkL_StkR;
TOC_Eval__StkD_PStkL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; SOffsetL, SOffsetR: Byte; StackInc: ShortInt; end;
POC_Eval__StkD_PStkL_PVarR = ^TOC_Eval__StkD_PStkL_PVarR;
TOC_Eval__StkD_PStkL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetR, PRightOffset: Word; StackInc: ShortInt; end;
POC_Eval__StkD_PStkL_PStkR = ^TOC_Eval__StkD_PStkL_PStkR;
TOC_Eval__StkD_PStkL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; StackInc: ShortInt; end;
POC_Eval__PVarD_PtrL_PtrR = ^TOC_Eval__PVarD_PtrL_PtrR;
TOC_Eval__PVarD_PtrL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; PtrL, PtrR: Pointer; PDestOffset: Word; end;
POC_Eval__PVarD_PtrL_VarR = ^TOC_Eval__PVarD_PtrL_VarR;
TOC_Eval__PVarD_PtrL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; PtrL: Pointer; VOffsetR, PDestOffset: Word; end;
POC_Eval__PVarD_PtrL_StkR = ^TOC_Eval__PVarD_PtrL_StkR;
TOC_Eval__PVarD_PtrL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; PtrL: Pointer; SOffsetR: Byte; PDestOffset: Word; StackInc: ShortInt; end;
POC_Eval__PVarD_PtrL_PVarR = ^TOC_Eval__PVarD_PtrL_PVarR;
TOC_Eval__PVarD_PtrL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; PtrL: Pointer; VOffsetR, PRightOffset, PDestOffset: Word; end;
POC_Eval__PVarD_PtrL_PStkR = ^TOC_Eval__PVarD_PtrL_PStkR;
TOC_Eval__PVarD_PtrL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; PtrL: Pointer; PDestOffset: Word; end;
POC_Eval__PVarD_VarL_PtrR = ^TOC_Eval__PVarD_VarL_PtrR;
TOC_Eval__PVarD_VarL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL: Word; PtrR: Pointer; PDestOffset: Word; end;
POC_Eval__PVarD_VarL_VarR = ^TOC_Eval__PVarD_VarL_VarR;
TOC_Eval__PVarD_VarL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL, VOffsetR, PDestOffset: Word; end;
POC_Eval__PVarD_VarL_StkR = ^TOC_Eval__PVarD_VarL_StkR;
TOC_Eval__PVarD_VarL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL: Word; SOffsetR: Byte; PDestOffset: Word; StackInc: ShortInt; end;
POC_Eval__PVarD_VarL_PVarR = ^TOC_Eval__PVarD_VarL_PVarR;
TOC_Eval__PVarD_VarL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL, VOffsetR, PRightOffset, PDestOffset: Word; end;
POC_Eval__PVarD_VarL_PStkR = ^TOC_Eval__PVarD_VarL_PStkR;
TOC_Eval__PVarD_VarL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL, PDestOffset: Word; end;
POC_Eval__PVarD_StkL_PtrR = ^TOC_Eval__PVarD_StkL_PtrR;
TOC_Eval__PVarD_StkL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; SOffsetL: Byte; PtrR: Pointer; PDestOffset: Word; StackInc: ShortInt; end;
POC_Eval__PVarD_StkL_VarR = ^TOC_Eval__PVarD_StkL_VarR;
TOC_Eval__PVarD_StkL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; SOffsetL: Byte; VOffsetR, PDestOffset: Word; StackInc: ShortInt; end;
POC_Eval__PVarD_StkL_StkR = ^TOC_Eval__PVarD_StkL_StkR;
TOC_Eval__PVarD_StkL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; SOffsetL, SOffsetR: Byte; PDestOffset: Word; StackInc: ShortInt; end;
POC_Eval__PVarD_StkL_PVarR = ^TOC_Eval__PVarD_StkL_PVarR;
TOC_Eval__PVarD_StkL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; SOffsetL: Byte; VOffsetR, PRightOffset, PDestOffset: Word; StackInc: ShortInt; end;
POC_Eval__PVarD_StkL_PStkR = ^TOC_Eval__PVarD_StkL_PStkR;
TOC_Eval__PVarD_StkL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; SOffsetL: Byte; PDestOffset: Word; StackInc: ShortInt; end;
POC_Eval__PVarD_PVarL_PtrR = ^TOC_Eval__PVarD_PVarL_PtrR;
TOC_Eval__PVarD_PVarL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL: Word; PtrR: Pointer; PLeftOffset, PDestOffset: Word; end;
POC_Eval__PVarD_PVarL_VarR = ^TOC_Eval__PVarD_PVarL_VarR;
TOC_Eval__PVarD_PVarL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL, VOffsetR, PLeftOffset, PDestOffset: Word; end;
POC_Eval__PVarD_PVarL_StkR = ^TOC_Eval__PVarD_PVarL_StkR;
TOC_Eval__PVarD_PVarL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL: Word; SOffsetR: Byte; PLeftOffset, PDestOffset: Word; StackInc: ShortInt; end;
POC_Eval__PVarD_PVarL_PVarR = ^TOC_Eval__PVarD_PVarL_PVarR;
TOC_Eval__PVarD_PVarL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL, VOffsetR, PRightOffset, PLeftOffset, PDestOffset: Word; end;
POC_Eval__PVarD_PVarL_PStkR = ^TOC_Eval__PVarD_PVarL_PStkR;
TOC_Eval__PVarD_PVarL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetL, PLeftOffset, PDestOffset: Word; end;
POC_Eval__PVarD_PStkL_PtrR = ^TOC_Eval__PVarD_PStkL_PtrR;
TOC_Eval__PVarD_PStkL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; PtrR: Pointer; PDestOffset: Word; end;
POC_Eval__PVarD_PStkL_VarR = ^TOC_Eval__PVarD_PStkL_VarR;
TOC_Eval__PVarD_PStkL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetR, PDestOffset: Word; end;
POC_Eval__PVarD_PStkL_StkR = ^TOC_Eval__PVarD_PStkL_StkR;
TOC_Eval__PVarD_PStkL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD: Word; SOffsetL, SOffsetR: Byte; PDestOffset: Word; StackInc: ShortInt; end;
POC_Eval__PVarD_PStkL_PVarR = ^TOC_Eval__PVarD_PStkL_PVarR;
TOC_Eval__PVarD_PStkL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, VOffsetR, PRightOffset, PDestOffset: Word; end;
POC_Eval__PVarD_PStkL_PStkR = ^TOC_Eval__PVarD_PStkL_PStkR;
TOC_Eval__PVarD_PStkL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetD, PDestOffset: Word; end;
{$IFDEF Lape_PStkD}
POC_Eval__PStkD_PtrL_PtrR = ^TOC_Eval__PStkD_PtrL_PtrR;
TOC_Eval__PStkD_PtrL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrL, PtrR: Pointer; end;
POC_Eval__PStkD_PtrL_VarR = ^TOC_Eval__PStkD_PtrL_VarR;
TOC_Eval__PStkD_PtrL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrL: Pointer; VOffsetR: Word; end;
POC_Eval__PStkD_PtrL_StkR = ^TOC_Eval__PStkD_PtrL_StkR;
TOC_Eval__PStkD_PtrL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrL: Pointer; SOffsetR: Byte; StackInc: ShortInt; end;
POC_Eval__PStkD_PtrL_PVarR = ^TOC_Eval__PStkD_PtrL_PVarR;
TOC_Eval__PStkD_PtrL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrL: Pointer; VOffsetR, PRightOffset: Word; end;
POC_Eval__PStkD_PtrL_PStkR = ^TOC_Eval__PStkD_PtrL_PStkR;
TOC_Eval__PStkD_PtrL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrL: Pointer; end;
POC_Eval__PStkD_VarL_PtrR = ^TOC_Eval__PStkD_VarL_PtrR;
TOC_Eval__PStkD_VarL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL: Word; PtrR: Pointer; end;
POC_Eval__PStkD_VarL_VarR = ^TOC_Eval__PStkD_VarL_VarR;
TOC_Eval__PStkD_VarL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL, VOffsetR: Word; end;
POC_Eval__PStkD_VarL_StkR = ^TOC_Eval__PStkD_VarL_StkR;
TOC_Eval__PStkD_VarL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL: Word; SOffsetR: Byte; StackInc: ShortInt; end;
POC_Eval__PStkD_VarL_PVarR = ^TOC_Eval__PStkD_VarL_PVarR;
TOC_Eval__PStkD_VarL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL, VOffsetR, PRightOffset: Word; end;
POC_Eval__PStkD_VarL_PStkR = ^TOC_Eval__PStkD_VarL_PStkR;
TOC_Eval__PStkD_VarL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL: Word; end;
POC_Eval__PStkD_StkL_PtrR = ^TOC_Eval__PStkD_StkL_PtrR;
TOC_Eval__PStkD_StkL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; SOffsetL: Byte; PtrR: Pointer; StackInc: ShortInt; end;
POC_Eval__PStkD_StkL_VarR = ^TOC_Eval__PStkD_StkL_VarR;
TOC_Eval__PStkD_StkL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; SOffsetL: Byte; VOffsetR: Word; StackInc: ShortInt; end;
POC_Eval__PStkD_StkL_StkR = ^TOC_Eval__PStkD_StkL_StkR;
TOC_Eval__PStkD_StkL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; SOffsetL, SOffsetR: Byte; StackInc: ShortInt; end;
POC_Eval__PStkD_StkL_PVarR = ^TOC_Eval__PStkD_StkL_PVarR;
TOC_Eval__PStkD_StkL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; SOffsetL: Byte; VOffsetR, PRightOffset: Word; StackInc: ShortInt; end;
POC_Eval__PStkD_StkL_PStkR = ^TOC_Eval__PStkD_StkL_PStkR;
TOC_Eval__PStkD_StkL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; SOffsetL: Byte; StackInc: ShortInt; end;
POC_Eval__PStkD_PVarL_PtrR = ^TOC_Eval__PStkD_PVarL_PtrR;
TOC_Eval__PStkD_PVarL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL: Word; PtrR: Pointer; PLeftOffset: Word; end;
POC_Eval__PStkD_PVarL_VarR = ^TOC_Eval__PStkD_PVarL_VarR;
TOC_Eval__PStkD_PVarL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL, VOffsetR, PLeftOffset: Word; end;
POC_Eval__PStkD_PVarL_StkR = ^TOC_Eval__PStkD_PVarL_StkR;
TOC_Eval__PStkD_PVarL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL: Word; SOffsetR: Byte; PLeftOffset: Word; StackInc: ShortInt; end;
POC_Eval__PStkD_PVarL_PVarR = ^TOC_Eval__PStkD_PVarL_PVarR;
TOC_Eval__PStkD_PVarL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL, VOffsetR, PRightOffset, PLeftOffset: Word; end;
POC_Eval__PStkD_PVarL_PStkR = ^TOC_Eval__PStkD_PVarL_PStkR;
TOC_Eval__PStkD_PVarL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetL, PLeftOffset: Word; end;
POC_Eval__PStkD_PStkL_PtrR = ^TOC_Eval__PStkD_PStkL_PtrR;
TOC_Eval__PStkD_PStkL_PtrR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; PtrR: Pointer; end;
POC_Eval__PStkD_PStkL_VarR = ^TOC_Eval__PStkD_PStkL_VarR;
TOC_Eval__PStkD_PStkL_VarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetR: Word; end;
POC_Eval__PStkD_PStkL_StkR = ^TOC_Eval__PStkD_PStkL_StkR;
TOC_Eval__PStkD_PStkL_StkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; SOffsetL, SOffsetR: Byte; StackInc: ShortInt; end;
POC_Eval__PStkD_PStkL_PVarR = ^TOC_Eval__PStkD_PStkL_PVarR;
TOC_Eval__PStkD_PStkL_PVarR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; VOffsetR, PRightOffset: Word; end;
POC_Eval__PStkD_PStkL_PStkR = ^TOC_Eval__PStkD_PStkL_PStkR;
TOC_Eval__PStkD_PStkL_PStkR = {$IFDEF Lape_SmallCode}packed{$ENDIF} record Proc: TLapeEvalProc; end;
{$ENDIF}

