//Taken from the DWScript project (http://code.google.com/p/dwscript/)
//Adjusted to compile with Lape

type
  TMyArray = array[1..1000] of Int32;
var
  MyArray: TMyArray;

procedure swap(var a, b: Int32);
var
  z: Int32;
begin
  z:=a;
  a:=b;
  b:=z;
end;

// Fastsearch - recursive version

function FastSearchRec(lower, upper, tosearch: Int32): Int32;
var
  m1, m2: Int32;
begin
  if lower <= upper then
  begin
    m1 := (lower+upper) div 2;
    m2 := lower+((upper-lower)*(tosearch-MyArray[lower])div(MyArray[upper]- MyArray[lower]));
    if m1 > m2 then
      swap(m1, m2);
    if tosearch = MyArray[m1] then result := m1
    else if tosearch = MyArray[m2] then result := m2
    else if tosearch < MyArray[m1] then result := fastsearchrec(lower,m1-1,tosearch)
    else if tosearch < MyArray[m2] then result := fastsearchrec(m1+1,m2-1,tosearch)
    else result := fastsearchrec(m2+1,upper,tosearch);
  end else result := -1;
end;

// Fastsearch - iterative version

function FastSearchIt(lower, upper, tosearch: Int32): Int32;
var
  m1, m2, pos: Int32;
begin
  pos := -1;

  repeat
    m1 := (lower+upper) div 2;
    m2 := lower+((upper-lower)*(tosearch-MyArray[lower])div(MyArray[upper]- MyArray[lower]));
    if m1 > m2 then
      swap(m1,m2);
    if tosearch = MyArray[m1] then pos := m1
    else if tosearch = MyArray[m2] then pos := m2
    else if tosearch < MyArray[m1] then upper:=m1-1
    else if tosearch > MyArray[m2] then lower:=m2+1
    else begin lower := m1+1; upper := m2-1; end;
  until (pos <> -1) or (MyArray[lower] >= MyArray[upper]);

  if tosearch=MyArray[lower] then
    pos := lower;
  result := pos;
end;

var
  i: Int32;
begin
  for i:= 1 to 1000 do
    MyArray[i] := i;
  WriteLn(FastSearchRec(1,1000,500));
  WriteLn(FastSearchIt(1,1000,500));
end;
